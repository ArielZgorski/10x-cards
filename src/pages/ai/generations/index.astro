---
import AppLayout from '../../../layouts/AppLayout.astro';
import { QueryProvider } from '../../../components/providers/QueryProvider';
---

<AppLayout title="Generowanie AI - 10x Cards" currentPage="generations">
  <div class="generations-page">
    <div class="page-header">
      <div class="header-content">
        <h1 class="page-title">Generowanie AI</h1>
        <p class="page-description">
          Wklej tekst źródłowy, a AI wygeneruje dla Ciebie fiszki do nauki
        </p>
      </div>
    </div>
    
    <div class="page-content">
      <!-- Generation Form -->
      <div class="generation-form-section">
        <div class="form-card">
          <h2 class="form-title">Nowa generacja</h2>
          
          <form id="generation-form" class="generation-form">
            <div class="form-group">
              <label for="source_text">Tekst źródłowy</label>
              <textarea 
                id="source_text" 
                name="source_text" 
                placeholder="Wklej tutaj tekst, z którego AI ma wygenerować fiszki (minimum 1000 znaków)..."
                rows="8"
                required
                minlength="1000"
                maxlength="10000"
              ></textarea>
              <div class="char-counter">
                <span id="char-count">0</span> / 10,000 znaków (min. 1,000)
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-group">
                <label for="model">Model (opcjonalnie)</label>
                <select id="model" name="model">
                  <option value="">Domyślny model</option>
                  <option value="openai/gpt-3.5-turbo">GPT-3.5 Turbo</option>
                  <option value="openai/gpt-4">GPT-4</option>
                  <option value="anthropic/claude-3-haiku">Claude 3 Haiku</option>
                </select>
              </div>
              
              <div class="form-group">
                <label for="prompt_version">Wersja promptu</label>
                <select id="prompt_version" name="prompt_version">
                  <option value="v1">Wersja 1 (podstawowa)</option>
                  <option value="v2">Wersja 2 (zaawansowana)</option>
                </select>
              </div>
            </div>
            
            <button type="submit" class="generate-btn" id="generate-btn" disabled>
              <span class="btn-text">Generuj fiszki</span>
              <span class="btn-spinner hidden">
                <svg class="spinner" viewBox="0 0 24 24">
                  <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none" opacity="0.25"/>
                  <path d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" fill="currentColor"/>
                </svg>
              </span>
            </button>
            
            <div class="form-message" id="form-message"></div>
          </form>
        </div>
      </div>
      
      <!-- Generations List -->
      <div class="generations-list-section">
        <div class="list-header">
          <h2 class="list-title">Twoje generacje</h2>
          <div class="list-filters">
            <select id="status-filter" class="filter-select">
              <option value="">Wszystkie statusy</option>
              <option value="pending">Oczekujące</option>
              <option value="running">W trakcie</option>
              <option value="succeeded">Ukończone</option>
              <option value="failed">Nieudane</option>
            </select>
          </div>
        </div>
        
        <div class="generations-list" id="generations-list">
          <div class="loading-state">
            <div class="loading-spinner">
              <svg class="spinner" viewBox="0 0 24 24">
                <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none" opacity="0.25"/>
                <path d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" fill="currentColor"/>
              </svg>
            </div>
            <p>Ładowanie generacji...</p>
          </div>
        </div>
        
        <div class="pagination" id="pagination"></div>
      </div>
    </div>
  </div>
</AppLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sourceTextArea = document.getElementById('source_text') as HTMLTextAreaElement;
    const charCount = document.getElementById('char-count') as HTMLElement;
    const generateBtn = document.getElementById('generate-btn') as HTMLButtonElement;
    const form = document.getElementById('generation-form') as HTMLFormElement;
    const formMessage = document.getElementById('form-message') as HTMLElement;
    const generationsList = document.getElementById('generations-list') as HTMLElement;
    
    // Character counter and validation
    const updateCharCount = () => {
      const count = sourceTextArea.value.length;
      charCount.textContent = count.toLocaleString();
      
      const isValid = count >= 1000 && count <= 10000;
      generateBtn.disabled = !isValid;
      
      if (count < 1000) {
        charCount.style.color = '#dc2626';
      } else if (count > 9000) {
        charCount.style.color = '#f59e0b';
      } else {
        charCount.style.color = '#16a34a';
      }
    };
    
    sourceTextArea.addEventListener('input', updateCharCount);
    updateCharCount();
    
    // Form submission
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(form);
      const requestData = {
        source_text: formData.get('source_text'),
        model: formData.get('model') || undefined,
        prompt_version: formData.get('prompt_version') || 'v1'
      };
      
      // Show loading state
      const btnText = generateBtn.querySelector('.btn-text') as HTMLElement;
      const btnSpinner = generateBtn.querySelector('.btn-spinner') as HTMLElement;
      
      generateBtn.disabled = true;
      btnText.classList.add('hidden');
      btnSpinner.classList.remove('hidden');
      formMessage.textContent = '';
      formMessage.className = 'form-message';
      
      try {
        // Check authentication
        if (!window.authState?.isAuthenticated) {
          window.location.href = '/login';
          return;
        }
        
        const response = await fetch('/api/ai/generations', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include',
          body: JSON.stringify(requestData)
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Wystąpił błąd podczas generowania');
        }
        
        const result = await response.json();
        
        // Show success message
        formMessage.textContent = `Generacja rozpoczęta! ID: ${result.generation_id}`;
        formMessage.className = 'form-message success';
        
        // Clear form
        form.reset();
        updateCharCount();
        
        // Refresh generations list
        setTimeout(() => {
          loadGenerations();
        }, 1000);
        
      } catch (error) {
        formMessage.textContent = error instanceof Error ? error.message : 'Wystąpił błąd';
        formMessage.className = 'form-message error';
      } finally {
        // Reset button state
        generateBtn.disabled = false;
        btnText.classList.remove('hidden');
        btnSpinner.classList.add('hidden');
      }
    });
    
    // Load generations list
    const loadGenerations = async () => {
      try {
        if (!window.authState?.isAuthenticated) return;
        
        // For demo, show mock data
        const mockGenerations = [
          {
            id: 'demo-gen-1',
            source_text: 'Przykładowy tekst źródłowy o fizyce kwantowej...',
            status: 'succeeded',
            model: 'gpt-3.5-turbo',
            created_at: new Date(Date.now() - 3600000).toISOString(),
            updated_at: new Date(Date.now() - 3000000).toISOString()
          },
          {
            id: 'demo-gen-2',
            source_text: 'Tekst o historii Polski...',
            status: 'running',
            model: 'gpt-4',
            created_at: new Date(Date.now() - 300000).toISOString(),
            updated_at: new Date(Date.now() - 300000).toISOString()
          }
        ];
        
        renderGenerations(mockGenerations);
        
      } catch (error) {
        console.error('Error loading generations:', error);
        generationsList.innerHTML = '<div class="error-state">Błąd podczas ładowania generacji</div>';
      }
    };
    
    const renderGenerations = (generations: any[]) => {
      if (generations.length === 0) {
        generationsList.innerHTML = `
          <div class="empty-state">
            <p>Nie masz jeszcze żadnych generacji</p>
            <p>Rozpocznij od wklejenia tekstu powyżej</p>
          </div>
        `;
        return;
      }
      
      const html = generations.map(gen => `
        <div class="generation-card" onclick="window.location.href='/ai/generations/${gen.id}'">
          <div class="generation-header">
            <div class="generation-status ${gen.status}">${getStatusText(gen.status)}</div>
            <div class="generation-date">${formatDate(gen.created_at)}</div>
          </div>
          <div class="generation-content">
            <p class="generation-text">${gen.source_text.substring(0, 150)}${gen.source_text.length > 150 ? '...' : ''}</p>
            <div class="generation-meta">
              <span class="meta-item">Model: ${gen.model || 'domyślny'}</span>
              <span class="meta-item">ID: ${gen.id.substring(0, 8)}</span>
            </div>
          </div>
        </div>
      `).join('');
      
      generationsList.innerHTML = html;
    };
    
    const getStatusText = (status: string) => {
      const statusMap: Record<string, string> = {
        pending: 'Oczekujące',
        running: 'W trakcie',
        succeeded: 'Ukończone',
        failed: 'Nieudane'
      };
      return statusMap[status] || status;
    };
    
    const formatDate = (dateString: string) => {
      return new Date(dateString).toLocaleString('pl-PL');
    };
    
    // Load initial data
    loadGenerations();
  });
</script>

<style>
  .generations-page {
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .page-header {
    margin-bottom: 2rem;
  }
  
  .page-title {
    font-size: 2rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0 0 0.5rem 0;
  }
  
  .page-description {
    color: #6b7280;
    margin: 0;
    font-size: 1.1rem;
  }
  
  .page-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
  }
  
  .form-card {
    background: white;
    border-radius: 1rem;
    padding: 1.5rem;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
  }
  
  .form-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1f2937;
    margin: 0 0 1.5rem 0;
  }
  
  .generation-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }
  
  .form-group label {
    font-weight: 500;
    color: #374151;
  }
  
  .form-group textarea,
  .form-group select {
    padding: 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 0.5rem;
    font-size: 1rem;
    transition: border-color 0.2s ease;
    font-family: inherit;
  }
  
  .form-group textarea:focus,
  .form-group select:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
  
  .char-counter {
    font-size: 0.875rem;
    text-align: right;
    color: #6b7280;
  }
  
  .generate-btn {
    background: #3b82f6;
    color: white;
    border: none;
    padding: 0.75rem 1rem;
    border-radius: 0.5rem;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }
  
  .generate-btn:hover:not(:disabled) {
    background: #2563eb;
  }
  
  .generate-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .form-message {
    text-align: center;
    font-size: 0.875rem;
    min-height: 1.25rem;
    padding: 0.5rem;
    border-radius: 0.5rem;
  }
  
  .form-message.success {
    background: #ecfdf5;
    color: #16a34a;
    border: 1px solid #bbf7d0;
  }
  
  .form-message.error {
    background: #fef2f2;
    color: #dc2626;
    border: 1px solid #fecaca;
  }
  
  .list-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }
  
  .list-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1f2937;
    margin: 0;
  }
  
  .filter-select {
    padding: 0.5rem;
    border: 1px solid #d1d5db;
    border-radius: 0.5rem;
    font-size: 0.875rem;
  }
  
  .generations-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .generation-card {
    background: white;
    border-radius: 0.5rem;
    padding: 1rem;
    border: 1px solid #e5e7eb;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .generation-card:hover {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    border-color: #3b82f6;
  }
  
  .generation-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
  }
  
  .generation-status {
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
  }
  
  .generation-status.pending {
    background: #fef3c7;
    color: #92400e;
  }
  
  .generation-status.running {
    background: #dbeafe;
    color: #1d4ed8;
  }
  
  .generation-status.succeeded {
    background: #dcfce7;
    color: #166534;
  }
  
  .generation-status.failed {
    background: #fecaca;
    color: #991b1b;
  }
  
  .generation-date {
    font-size: 0.875rem;
    color: #6b7280;
  }
  
  .generation-text {
    color: #374151;
    line-height: 1.5;
    margin: 0 0 0.75rem 0;
  }
  
  .generation-meta {
    display: flex;
    gap: 1rem;
  }
  
  .meta-item {
    font-size: 0.75rem;
    color: #6b7280;
  }
  
  .loading-state,
  .empty-state,
  .error-state {
    text-align: center;
    padding: 2rem;
    color: #6b7280;
  }
  
  .spinner {
    width: 1.25rem;
    height: 1.25rem;
    animation: spin 1s linear infinite;
  }
  
  .hidden {
    display: none;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  @media (max-width: 768px) {
    .page-content {
      grid-template-columns: 1fr;
    }
    
    .form-row {
      grid-template-columns: 1fr;
    }
    
    .list-header {
      flex-direction: column;
      gap: 1rem;
      align-items: stretch;
    }
  }
</style>

